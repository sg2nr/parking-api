{
	"info": {
		"_postman_id": "76cd9d3d-8d1b-4fd8-a258-bd96c5e96b2f",
		"name": "Parking-Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "parkings",
			"item": [
				{
					"name": "Retrieve all parkings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fac88ea-cc94-45ca-b838-5ca8cd2c58bc",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"All parkings successfully returned\", () => {",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    response.forEach(p => {",
									"        pm.expect(p.id).to.be.not.undefined;",
									"        pm.expect(p.name).to.be.not.undefined;",
									"        pm.expect(p.address).to.be.not.undefined;",
									"        pm.expect(p.city).to.be.not.undefined;",
									"        pm.expect(p.statistics).to.be.not.undefined;",
									"        pm.expect(p.pricingPolicy).to.be.not.undefined;",
									"    });",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful GET request\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Acc",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "localhost:8080/parkings",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve parking with id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e51afeb2-ec7f-4a8d-aa83-5f30adc369c6",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Parking with id=1 is correctly returned\", () => {",
									"    pm.expect(response.id).to.be.equal(1);",
									"    pm.expect(response.name).to.be.not.undefined;",
									"    pm.expect(response.address).to.be.not.undefined;",
									"    pm.expect(response.city).to.be.not.undefined;",
									"    pm.expect(response.statistics).to.be.not.undefined;",
									"    pm.expect(response.pricingPolicy).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful GET request\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Acc",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/parkings/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Error case] Retrieve parking with id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd81e6a0-ae07-46fb-b320-c12ffc6b6fa9",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Error returned\", () => {",
									"    pm.expect(response.error).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"Bad Request (400) status returned\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.json;",
									"    pm.expect(response.status).to.be.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/parkings/999",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve pricing policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cf912b2-a6be-4170-b825-f49ea2c3da7c",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"All pricing policies successfully returned\", () => {",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    response.forEach(p => {",
									"        pm.expect(p.id).to.be.not.undefined;",
									"        pm.expect(p.policyCurrency).to.be.not.undefined;",
									"    });",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful GET request\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Acc",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "localhost:8080/pricing-policies",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"pricing-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new parking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a9b7e2f-b2ca-4903-aac4-0ac2568be196",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"New Parking correctly returned\", () => {",
									"    pm.expect(response.id).to.be.not.undefined;",
									"    pm.expect(response.name).to.be.not.undefined;",
									"    pm.expect(response.address).to.be.not.undefined;",
									"    pm.expect(response.city).to.be.not.undefined;",
									"    pm.expect(response.statistics).to.be.not.undefined;",
									"    pm.expect(response.pricingPolicy).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Parking de Sophia\",\r\n    \"address\": \"Sophia Antipolis\",\r\n    \"city\": \"Biot\",\r\n    \"requestedSlots\": {\r\n        \"50KwPowerSupply\": 5,\r\n        \"StandardParking\": 50,\r\n        \"20KwPowerSupply\": 2\r\n    },\r\n    \"pricingPolicyId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[Error case] Create again the same parking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "914fbf88-6d6c-4ad5-a83b-f5df26322a09",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Error returned\", () => {",
									"    pm.expect(response.error).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"Bad Request (400) status returned\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.json;",
									"    pm.expect(response.status).to.be.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Parking de Sophia\",\r\n    \"address\": \"Sophia Antipolis\",\r\n    \"city\": \"Biot\",\r\n    \"requestedSlots\": {\r\n        \"50KwPowerSupply\": 5,\r\n        \"StandardParking\": 50,\r\n        \"20KwPowerSupply\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete parking with id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdba4234-78a2-4b96-a139-a5a4026b94dc",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Acc",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/parkings/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "order",
			"item": [
				{
					"name": "Retrieve pricing policies ID = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84ba7cd6-23db-4d49-93d0-3f801e57f0c6",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Policy successfully returned\", () => {",
									"    pm.expect(response).to.be.not.undefined;",
									"    pm.expect(response.policyCurrency).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful GET request\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Acc",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "localhost:8080/pricing-policies/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"pricing-policies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Error case] Retrieve pricing policies with non valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d13b69bb-86bb-42ab-ba56-2060029bffa3",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Status code name has Bad Request\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Acc",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "localhost:8080/pricing-policies/string",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"pricing-policies",
								"string"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-in car in parking = 1 (price per hour = 3.50 EUR)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36606aaf-6523-4ab9-a689-0337458bc98a",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Check-in successful\", () => {",
									"    pm.expect(response.orderId).to.be.not.undefined;",
									"    pm.expect(response.checkin).to.be.not.undefined;",
									"    pm.expect(response.carPlate).to.be.not.undefined;",
									"    pm.expect(response.parkingId).to.be.not.undefined;",
									"    pm.expect(response.slotNumber).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carPlate\": \"ZZ98709\",\r\n    \"serviceRequested\": \"StandardParking\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/1/order",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"1",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Error case] Check-in car - no slot availables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37aee87a-8d07-4b74-be92-b6c57dbbf635",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Error returned\", () => {",
									"    pm.expect(response.error).to.be.not.undefined;",
									"    pm.expect(response.message).to.be.equal(\"No slot available.\");",
									"});",
									"",
									"pm.test(\"Bad Request (400) status returned\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.json;",
									"    pm.expect(response.status).to.be.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carPlate\": \"YY32156\",\r\n    \"serviceRequested\": \"50KwPowerSupply\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/1/order",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"1",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Error case] Check-in car - Car already parked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02091157-276a-4f30-855d-ecae3dfae549",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Error returned\", () => {",
									"    pm.expect(response.error).to.be.not.undefined;",
									"    pm.expect(response.message).to.be.equals(\"Vehicle is currently parked.\");",
									"});",
									"",
									"pm.test(\"Bad Request (400) status returned\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.json;",
									"    pm.expect(response.status).to.be.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carPlate\": \"ZZ98709\",\r\n    \"serviceRequested\": \"StandardParking\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/1/order",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"1",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-out car from parking = 1 (price per hour = 3.5 EUR)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce3be1c7-37fe-460e-9490-f2b81f9d27f8",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Checkout successful\", () => {",
									"    let orderDetails = response.orderDetails;",
									"    ",
									"    pm.expect(orderDetails).to.be.not.undefined;",
									"    pm.expect(orderDetails.checkin).to.be.not.undefined;",
									"    pm.expect(orderDetails.carPlate).to.be.not.undefined;",
									"    pm.expect(orderDetails.parkingId).to.be.not.undefined;",
									"    pm.expect(orderDetails.slotNumber).to.be.not.undefined;",
									"    ",
									"    pm.expect(response.amountToPay).to.be.not.undefined;",
									"    pm.expect(response.amountToPay.amount).to.be.not.undefined;",
									"    pm.expect(response.amountToPay.currency).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/checkout?orderId=1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"checkout"
							],
							"query": [
								{
									"key": "orderId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-in car in parking = 3 (price = 1 EUR + 0.50 EUR per hour)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03910d9b-f9b4-4ba6-89d6-c82875073fb4",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Check-in successful\", () => {",
									"    pm.expect(response.orderId).to.be.not.undefined;",
									"    pm.expect(response.checkin).to.be.not.undefined;",
									"    pm.expect(response.carPlate).to.be.not.undefined;",
									"    pm.expect(response.parkingId).to.be.not.undefined;",
									"    pm.expect(response.slotNumber).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"postman.setGlobalVariable('orderId', response.orderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carPlate\": \"KL06785\",\r\n    \"serviceRequested\": \"20KwPowerSupply\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/3/order",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"3",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-out car from parking = 1 (price per hour = 3.5 EUR) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "300e35fb-e8aa-4749-8679-80bd8d3dfb86",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Checkout successful\", () => {",
									"    let orderDetails = response.orderDetails;",
									"    ",
									"    pm.expect(orderDetails).to.be.not.undefined;",
									"    pm.expect(orderDetails.checkin).to.be.not.undefined;",
									"    pm.expect(orderDetails.carPlate).to.be.not.undefined;",
									"    pm.expect(orderDetails.parkingId).to.be.not.undefined;",
									"    pm.expect(orderDetails.slotNumber).to.be.not.undefined;",
									"    ",
									"    pm.expect(response.amountToPay).to.be.not.undefined;",
									"    pm.expect(response.amountToPay.amount).to.be.not.undefined;",
									"    pm.expect(response.amountToPay.currency).to.be.not.undefined;",
									"});",
									"",
									"pm.test(\"No error returned\", () => {",
									"    pm.expect(response.error).to.be.undefined;",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/checkout?orderId={{orderId}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"checkout"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Error case] Check-out car : order already checked-out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed867057-03dc-45ba-bcd3-52054d9badd7",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Error returned\", () => {",
									"    pm.expect(response.error).to.be.not.undefined;",
									"    pm.expect(response.message).to.be.equals(\"This order has already been checked-out.\");",
									"});",
									"",
									"pm.test(\"Bad Request (400) status returned\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.json;",
									"    pm.expect(response.status).to.be.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/parkings/checkout?orderId=1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"parkings",
								"checkout"
							],
							"query": [
								{
									"key": "orderId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c31ce379-884e-45cc-824b-1ad0a4a85401",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "23f42ea2-d110-4370-8e40-4ba11627f2a9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "actuator",
			"item": [
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d94023b0-bb2b-471e-98b7-a00fdc0912ff",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is UP\", () => {\r",
									"    pm.expect(responseJson.status).to.be.equal.toString(\"UP\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8081/actuator/health",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}